{"version":3,"sources":["context/alert/alertContext.js","context/firebase/firebaseContext.js","components/Form.js","components/Notes.js","components/Loader.js","pages/Home.js","pages/About.js","components/Navbar.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","e","preventDefault","trim","addNote","then","show","catch","className","type","placeholder","onChange","target","Notes","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","date","slice","split","join","onClick","Loader","role","Home","loading","fetchNotes","removeNote","useEffect","About","Navbar","to","exact","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","alertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebaseReducer","url","FirebaseState","showLoader","a","axios","get","res","Object","keys","data","Date","toJSON","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6857b8d9.chunk.js","sourcesContent":["import {createContext} from 'react';\r\n\r\nexport const AlertContext = createContext();\r\n","\r\nimport {createContext} from 'react';\r\n\r\nexport const FirebaseContext = createContext();","import React, {useState, useContext} from 'react'\r\nimport {AlertContext} from '../context/alert/alertContext'\r\nimport {FirebaseContext} from '../context/firebase/firebaseContext'\r\n\r\nexport const Form = () => {\r\n  const [value, setValue] = useState('');\r\n  const alert = useContext(AlertContext);\r\n  const firebase = useContext(FirebaseContext);\r\n\r\n  const submitHandler = e => {\r\n    e.preventDefault();\r\n\r\n    if (value.trim()) {\r\n      firebase.addNote(value.trim())\r\n      .then(() => {\r\n        alert.show('Заметка была создана', 'success');\r\n      }).catch(() => {\r\n        alert.show('Что-то пошло не так', 'danger');\r\n      })\r\n      setValue('');\r\n\r\n    } else {\r\n      alert.show('Введите название заметки')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"form-group\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          placeholder=\"Введите название заметки\"\r\n          value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n        />\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\r\n\r\nexport const Notes = ({notes, onRemove}) => (\r\n  <TransitionGroup component=\"ul\" className=\"list-group\">\r\n      {notes.map(note => (\r\n        <CSSTransition\r\n          key={note.id}\r\n          classNames={'note'}\r\n          timeout={800}\r\n        >\r\n          <li className=\"list-group-item note\">\r\n            <div>\r\n              <strong>{note.title}</strong>\r\n              <small>{note.date.slice(0, 19).split('T').join(' ')}</small>\r\n            </div>\r\n\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-danger btn-sm\"\r\n              onClick={() => onRemove(note.id)}\r\n            >\r\n              &times;\r\n            </button>\r\n          </li>\r\n        </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n)\r\n","import React from 'react'\r\n\r\nexport const Loader = () => (\r\n  <div className=\"text-center\">\r\n    <div className=\"spinner-border\" role=\"status\">\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </div>\r\n  </div>\r\n)\r\n","import React, {Fragment, useContext, useEffect} from 'react'\r\nimport {Form} from '../components/Form'\r\nimport {Notes} from '../components/Notes'\r\nimport {FirebaseContext} from '../context/firebase/firebaseContext'\r\nimport {Loader} from '../components/Loader'\r\n\r\nexport const Home = () => {\r\n  const {loading, notes, fetchNotes, removeNote} = useContext(FirebaseContext)\r\n\r\n  useEffect(() => {\r\n    fetchNotes()\r\n    // eslint-disable-next-line\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Form />\r\n\r\n      <hr/>\r\n\r\n      {loading\r\n        ? <Loader />\r\n        : <Notes notes={notes} onRemove={removeNote} />\r\n      }\r\n    </Fragment>\r\n  )\r\n}","import React from 'react'\r\n\r\nexport const About = () => (\r\n  <div className=\"jumbotron\">\r\n    <div className=\"container\">\r\n      <h1 className=\"display-4\">Лучшее React приложение</h1>\r\n      <p className=\"lead\">\r\n        Версия приложения <strong>1.0.42</strong>\r\n      </p>\r\n    </div>\r\n  </div>\r\n)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport const Navbar = () => (\r\n  <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\r\n    <div className=\"navbar-brand\">\r\n      Note App\r\n    </div>\r\n\r\n    <ul className=\"navbar-nav\">\r\n      <li className=\"nav-item\">\r\n        <NavLink\r\n          className=\"nav-link\"\r\n          to=\"/\"\r\n          exact\r\n        >\r\n          Главная\r\n        </NavLink>\r\n      </li>\r\n      <li className=\"nav-item\">\r\n        <NavLink\r\n          className=\"nav-link\"\r\n          to=\"/about\"\r\n        >\r\n          Информация\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n)\r\n","import React, {useContext} from 'react'\r\nimport {CSSTransition} from 'react-transition-group'\r\nimport {AlertContext} from '../context/alert/alertContext'\r\n\r\nexport const Alert = () => {\r\n\r\n  const { alert, hide } = useContext(AlertContext);\r\n\r\n  return (\r\n    <CSSTransition\r\n      in={alert.visible}\r\n      timeout={{\r\n        enter: 500,\r\n        exit: 350\r\n      }}\r\n      classNames={'alert'}\r\n      mountOnEnter\r\n      unmountOnExit\r\n    >\r\n      <div className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\r\n        <strong>Внимание!</strong>\r\n        &nbsp;{alert.text}\r\n        <button\r\n          onClick={hide}\r\n          type=\"button\"\r\n          className=\"close\" aria-label=\"Close\"\r\n        >\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n      </div>\r\n    </CSSTransition>\r\n  )\r\n}\r\n","import {HIDE_ALERT, SHOW_ALERT} from '../types'\r\n\r\nconst handlers = {\r\n  [SHOW_ALERT]: (state, {payload}) => ({...payload, visible: true}),\r\n  [HIDE_ALERT]: state => ({...state, visible: false}),\r\n  DEFAULT: state => state\r\n}\r\n\r\nexport const alertReducer = (state, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT;\r\n  return handle(state, action)\r\n}\r\n","export const SHOW_ALERT = 'SHOW_ALERT'\r\nexport const HIDE_ALERT = 'HIDE_ALERT'\r\nexport const SHOW_LOADER = 'SHOW_LOADER'\r\nexport const ADD_NOTE = 'ADD_NOTE'\r\nexport const FETCH_NOTES = 'FETCH_NOTES' //get all notes\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE'\r\n","import React, {useReducer} from 'react'\r\nimport { HIDE_ALERT, SHOW_ALERT } from '../types';\r\nimport {AlertContext} from './alertContext';\r\nimport { alertReducer } from './alertReducer';\r\n\r\nexport const AlertState = ({children}) => {\r\n  const [state, dispatch] = useReducer(alertReducer, {visible: false});\r\n\r\n  const show = (text, type = 'warning') => {\r\n    dispatch({\r\n      type: SHOW_ALERT,\r\n      payload: {text, type}\r\n    })\r\n  }\r\n\r\n  const hide = () => dispatch({type: HIDE_ALERT})\r\n\r\n  return (\r\n    <AlertContext.Provider value={{\r\n      show, hide, \r\n      alert: state\r\n    }}>\r\n      {children}\r\n    </AlertContext.Provider>\r\n  )\r\n}\r\n","import {ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER} from '../types'\r\n\r\nconst handlers = {\r\n  [SHOW_LOADER]: state => ({...state, loading: true}),\r\n  [ADD_NOTE]: (state, {payload}) => ({\r\n    ...state,\r\n    notes: [...state.notes, payload]\r\n  }),\r\n  [FETCH_NOTES]: (state, {payload}) => ({...state, notes: payload, loading: false}),\r\n  [REMOVE_NOTE]: (state, {payload}) => ({\r\n    ...state,\r\n    notes: state.notes.filter(note => note.id !== payload)\r\n  }),\r\n  DEFAULT: state => state\r\n}\r\n\r\nexport const firebaseReducer = (state, action) => {\r\n  const handle = handlers[action.type] || handlers.DEFAULT\r\n  return handle(state, action)\r\n}","import React, {useReducer} from 'react'\r\nimport axios from 'axios'\r\nimport {FirebaseContext} from './firebaseContext'\r\nimport {firebaseReducer} from './firebaseReducer'\r\nimport {ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER} from '../types'\r\n\r\nconst url = 'https://react-notes-81907-default-rtdb.firebaseio.com';\r\n\r\nexport const FirebaseState = ({children}) => {\r\n  const initialState = {\r\n    notes: [],\r\n    loading: false,\r\n  }\r\n  const [state, dispatch] = useReducer(firebaseReducer, initialState);\r\n\r\n  const showLoader = () => dispatch({type: SHOW_LOADER});\r\n\r\n  const fetchNotes = async () => {\r\n    showLoader();\r\n\r\n    const res = await axios.get(`${url}/notes.json`);\r\n\r\n    const payload = Object.keys(res.data).map(key => {\r\n      return {\r\n        ...res.data[key],\r\n        id: key\r\n      }\r\n    })\r\n\r\n    dispatch({\r\n      type: FETCH_NOTES,\r\n      payload, //payload: payload\r\n    })\r\n\r\n  }\r\n\r\n  const addNote = async title => {\r\n    const note = {\r\n      title, date: new Date().toJSON()\r\n    }\r\n\r\n    try {\r\n      const res = await axios.post(`${url}/notes.json`, note);\r\n      const payload = {\r\n        ...note,\r\n        id: res.data.name,\r\n      }\r\n\r\n      dispatch({\r\n        type: ADD_NOTE,\r\n        payload, //payload: payload\r\n      })\r\n\r\n    } catch (e) {\r\n      throw new Error(e.message);\r\n    } \r\n  }\r\n\r\n  const removeNote = async id => {\r\n    await axios.delete(`${url}/notes/${id}.json`);\r\n\r\n    dispatch({\r\n      type: REMOVE_NOTE,\r\n      payload: id,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <FirebaseContext.Provider value={{\r\n      showLoader, fetchNotes, addNote, removeNote,\r\n      loading: state.loading,\r\n      notes: state.notes,\r\n    }}>\r\n      {children}\r\n    </FirebaseContext.Provider>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\nimport {Home} from './pages/Home'\r\nimport {About} from './pages/About'\r\nimport {Navbar} from './components/Navbar'\r\nimport {Alert} from './components/Alert'\r\nimport {AlertState} from './context/alert/AlertState'\r\nimport {FirebaseState} from './context/firebase/FirebaseState'\r\n\r\nfunction App() {\r\n  return (\r\n    <FirebaseState>\r\n      <AlertState>\r\n        <BrowserRouter>\r\n          <Navbar/>\r\n          <div className=\"container pt-4\">\r\n            <Alert/>\r\n            <Switch>\r\n              <Route path={'/'} exact component={Home}/>\r\n              <Route path={'/about'} component={About}/>\r\n            </Switch>\r\n          </div>\r\n        </BrowserRouter>\r\n      </AlertState>\r\n    </FirebaseState>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}